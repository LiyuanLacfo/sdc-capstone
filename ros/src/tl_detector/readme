1. Training for the model for the simulator 


We trained a CNN based model for the traffic light classification(red light and not red light). The model shows in the below.

Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_1 (Conv2D)            (None, 398, 398, 32)      896       
_________________________________________________________________
activation_1 (Activation)    (None, 398, 398, 32)      0         
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 396, 396, 32)      9248      
_________________________________________________________________
activation_2 (Activation)    (None, 396, 396, 32)      0         
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 198, 198, 32)      0         
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 196, 196, 32)      9248      
_________________________________________________________________
activation_3 (Activation)    (None, 196, 196, 32)      0         
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 98, 98, 32)        0         
_________________________________________________________________
conv2d_4 (Conv2D)            (None, 96, 96, 32)        9248      
_________________________________________________________________
activation_4 (Activation)    (None, 96, 96, 32)        0         
_________________________________________________________________
max_pooling2d_3 (MaxPooling2 (None, 48, 48, 32)        0         
_________________________________________________________________
conv2d_5 (Conv2D)            (None, 46, 46, 32)        9248      
_________________________________________________________________
activation_5 (Activation)    (None, 46, 46, 32)        0         
_________________________________________________________________
max_pooling2d_4 (MaxPooling2 (None, 23, 23, 32)        0         
_________________________________________________________________
conv2d_6 (Conv2D)            (None, 21, 21, 32)        9248      
_________________________________________________________________
activation_6 (Activation)    (None, 21, 21, 32)        0         
_________________________________________________________________
max_pooling2d_5 (MaxPooling2 (None, 10, 10, 32)        0         
_________________________________________________________________
conv2d_7 (Conv2D)            (None, 8, 8, 32)          9248      
_________________________________________________________________
activation_7 (Activation)    (None, 8, 8, 32)          0         
_________________________________________________________________
max_pooling2d_6 (MaxPooling2 (None, 4, 4, 32)          0         
_________________________________________________________________
dropout_1 (Dropout)          (None, 4, 4, 32)          0         
_________________________________________________________________
flatten_1 (Flatten)          (None, 512)               0         
_________________________________________________________________
dense_1 (Dense)              (None, 128)               65664     
_________________________________________________________________
activation_8 (Activation)    (None, 128)               0         
_________________________________________________________________
dropout_2 (Dropout)          (None, 128)               0         
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 258       
_________________________________________________________________
activation_9 (Activation)    (None, 2)                 0         
=================================================================

We use the dropout in the last two layers.

After design the model, we trained the collected data and augmentated with flip, zoom, shift. The detail code list in the train.py.

Finally, we got the model model.h5.

2. For the real world data, we followed 2.5 Tensorflow Model: Object Detection API of John Chen's work.
https://github.com/diyjac/SDC-System-Integration/tree/master/classifier
Indeed, We use the best checkpoint 1911 as the finally model.

The model can be download from https://drive.google.com/open?id=0B8PSf2JS7ts2VDNSWmI1MVZRSDQ

rename to frozen_inference_graph.pb



